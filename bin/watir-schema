#!/usr/bin/env ruby

require 'micro-optparse'
require 'yaml'
$: << './lib'
require 'watir/schema'

options = Parser.new do |p|
   p.banner = "This is a watir-schema script, how to use it see below"
   p.version = "watir-schema #{Watir::Schema::VERSION}"
   p.option :verbose, "enable verbose output, values: 0 to 5",
	 :short => 'v', :default => 1, :value_in_set => ( 0..5 ).to_a
   p.option :schema, "set schema YAML-file to proceed",
	 :short => 's', :default => '', :value_matches => /^.+$/
   p.option :browser, "use browser to surf, values: " +
	 "msie|firefox|chrome|safari",
	 :short => 'b', :default => 'firefox',
	 :value_matches => /^(msie|firefox|chrome|safari)$/
   p.option :proxy, "use proxy", :short => 'p'
   p.option :dir, "set base dir to store results",
	 :short => 'd', :default => ''
   p.option :store, "store web-browser state into a folder",
	 :short => 't', :default => ''
   p.option :email, "set an email to report test results",
	 :short => 'e', :default => '',
         :value_satisfies => lambda {|x| x.empty? || x =~ /[^@]+@[^@]+/ }
   p.option :log, "set output flow to a file", :short => 'l', :default => ''
end.process!
if !ARGV.empty?
   $stderr.puts "Invalid option(s): #{ARGV.inspect}" ; exit ; end

f = case options[ :verbose ]
    when 0
       [ :warn ]
    when 1
       [ :info, :warn ]
    when 2
       [ :info, :warn, :basic ]
    when 3
       [ :info, :warn, :basic, :extended ]
    when 4
       [ :info, :warn, :basic, :enter, :leave ]
    when 5
       [ :info, :warn, :basic, :extended, :enter, :leave ] ; end

io = ( options[ :log ] == '-' || !options[ :email ].empty? ) &&
   ( require 'tempfile' ; Tempfile.new( 'tmp.log' ) ) ||
   options[ :log ].empty? && $stdout ||
   File.open( options[ :log ], 'w+' )

require 'rdoba'
settings = YAML::load( open Watir::Schema.root( 'share/settings.yaml' ) )

$stdout.puts "The script is running..."

rdoba :log => { :in => Watir::Schema, :as => :log, :prefix => [ :timestamp ],
   :io => io, :functions => f }

surfer = Watir::Schema.new settings, options[ :browser ],
      options[ :dir ]

schema = YAML::load( open options[ :schema ] )
surfer.crawl schema, options[ :proxy ], options[ :store ]
surfer.report schema, options[ :email ], io, options[ :log ]

